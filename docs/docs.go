// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "support@vetapi.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/clinics": {
            "get": {
                "description": "Retrieve a paginated list of all clinics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clinics"
                ],
                "summary": "Get all clinics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 10, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field (name, display_name, created_at, updated_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Sort descending",
                        "name": "sort_desc",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/clinics.ListClinicsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Register a new clinic (tenant) in the system with color palette",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clinics"
                ],
                "summary": "Create a new clinic",
                "parameters": [
                    {
                        "description": "Clinic data",
                        "name": "clinic",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/clinics.CreateClinicRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/clinics.ClinicResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Name already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/clinics/{id}": {
            "get": {
                "description": "Retrieve a specific clinic using its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clinics"
                ],
                "summary": "Get clinic by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Clinic ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/clinics.ClinicResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Clinic not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a clinic from the system (soft delete - marks as inactive)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clinics"
                ],
                "summary": "Delete clinic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Clinic ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Clinic deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Clinic not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Partially update an existing clinic's data (only provided fields)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clinics"
                ],
                "summary": "Update clinic (partial)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Clinic ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update (partial)",
                        "name": "clinic",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/clinics.UpdateClinicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/clinics.ClinicResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Clinic not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Name already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/register": {
            "post": {
                "description": "Crea un nuevo usuario (empleado) asociado a una clínica.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Registra un nuevo usuario",
                "parameters": [
                    {
                        "description": "Datos para el registro del usuario",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.registerUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Error: Petición inválida",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Error: El email ya existe",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error: Error interno del servidor",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "clinics.ClinicResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "palette": {
                    "$ref": "#/definitions/clinics.ColorPaletteResponse"
                },
                "phone": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "clinics.ColorPaletteDTO": {
            "type": "object",
            "properties": {
                "background": {
                    "type": "string"
                },
                "primary": {
                    "type": "string"
                },
                "quaternary": {
                    "type": "string"
                },
                "secondary": {
                    "type": "string"
                },
                "tertiary": {
                    "type": "string"
                }
            }
        },
        "clinics.ColorPaletteResponse": {
            "type": "object",
            "properties": {
                "background": {
                    "type": "string"
                },
                "primary": {
                    "type": "string"
                },
                "quaternary": {
                    "type": "string"
                },
                "secondary": {
                    "type": "string"
                },
                "tertiary": {
                    "type": "string"
                }
            }
        },
        "clinics.CreateClinicRequest": {
            "type": "object",
            "required": [
                "displayName",
                "name"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 5
                },
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "displayName": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 2
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "palette": {
                    "$ref": "#/definitions/clinics.ColorPaletteDTO"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 7
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "clinics.ListClinicsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/clinics.ClinicResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationResponse"
                }
            }
        },
        "clinics.UpdateClinicRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 5
                },
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "displayName": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 2
                },
                "email": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "palette": {
                    "$ref": "#/definitions/clinics.ColorPaletteDTO"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 7
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "dto.PaginationResponse": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "type": "integer"
                },
                "hasNext": {
                    "type": "boolean"
                },
                "hasPrev": {
                    "type": "boolean"
                },
                "perPage": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "clinicId": {
                    "description": "¡El discriminador de Tenant!",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "description": "ej: \"admin\", \"vet\"",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.ValidationError": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "response.ValidationErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.ValidationError"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "users.registerUserRequest": {
            "type": "object",
            "required": [
                "clinicId",
                "email",
                "fullName",
                "password",
                "role"
            ],
            "properties": {
                "clinicId": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "role": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Veterinary API Multi-Tenant",
	Description:      "Interactive documentation for the veterinary API, built in Go with multi-tenant support.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
